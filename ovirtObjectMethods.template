//go:generate genny -in=$GOFILE -out=gen-$GOFILE gen "OvirtObjectType=Vm,Cluster" -pkg ovirtapi
package ovirtapi

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/cheekybits/genny/generic"
)

type OvirtObjectType generic.Type

func (con *Connection) GetOvirtObjectType(id string) (*OvirtObjectType, error) {
	body, err := con.GetLinkBody(reflect.TypeOf(OvirtObjectType{}).Name()+"s", id)
	if err != nil {
		return nil, err
	}
	object := con.NewOvirtObjectType()
	err = json.Unmarshal(body, object)
	if err != nil {
		return nil, err
	}
	return object, err
}

func (object *OvirtObjectType) Update() error {
	if object.OvirtObject.Href == "" {
		return fmt.Errorf("Object has not been saved to the server")
	}
	body, err := object.Con.Request("GET", object.Con.ResolveLink(object.Href), nil)
	if err != nil {
		return err
	}
	tempObject := OvirtObjectType{OvirtObject: OvirtObject{Con: object.Con}}
	err = json.Unmarshal(body, &tempObject)
	if err != nil {
		return err
	}
	*object = tempObject
	return nil
}

func (con *Connection) GetAllOvirtObjectTypes() ([]*OvirtObjectType, error) {
	body, err := con.GetLinkBody(reflect.TypeOf(OvirtObjectType{}).Name()+"s", "")
	if err != nil {
		return nil, err
	}
	objects := []*OvirtObjectType{}
	err = json.Unmarshal(body, &struct {
		OvirtObjectType *[]*OvirtObjectType
	}{&objects})
	if err != nil {
		return nil, err
	}
	for _, object := range objects {
		object.Con = con
	}
	return objects, err
}

func (con *Connection) NewOvirtObjectType() *OvirtObjectType {
	return &OvirtObjectType{OvirtObject: OvirtObject{Con: con}}
}

func (object *OvirtObjectType) Save() error {
	body, err := json.MarshalIndent(object, "", "    ")
	if err != nil {
		return err
	}
	// If there is a link, it is an already saved object, we need to update it
	if object.OvirtObject.Href != "" {
		body, err = object.Con.Request("PUT", object.Con.ResolveLink(object.Href), body)
		if err != nil {
			return err
		}
	} else {
		link, err := object.Con.GetLink(reflect.TypeOf(OvirtObjectType{}).Name() + "s")
		if err != nil {
			return err
		}
		body, err = object.Con.Request("POST", link, body)
		if err != nil {
			return err
		}
	}
	tempObject := OvirtObjectType{OvirtObject: OvirtObject{Con: object.Con}}
	err = json.Unmarshal(body, &tempObject)
	if err != nil {
		return err
	}
	*object = tempObject
	return nil
}
